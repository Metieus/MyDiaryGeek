// Servi√ßo para integra√ß√£o com OpenAI API
// Para usar em produ√ß√£o, adicione sua API key nas vari√°veis de ambiente

interface OpenAIMessage {
  role: "system" | "user" | "assistant";
  content: string;
}

interface OpenAIResponse {
  choices: {
    message: {
      content: string;
    };
  }[];
}

class OpenAIService {
  private apiKey: string;
  private baseUrl = "https://api.openai.com/v1/chat/completions";

  constructor() {
    // Em produ√ß√£o, use vari√°veis de ambiente
    this.apiKey = import.meta.env.VITE_OPENAI_API_KEY || "";
  }

  async sendMessage(userMessage: string, context?: any): Promise<string> {
    if (!this.apiKey) {
      // Fallback para demo - simula√ß√£o de resposta da IA
      return this.getMockResponse(userMessage, context);
    }

    try {
      const messages: OpenAIMessage[] = [
        {
          role: "system",
          content: `Voc√™ √© Archivius, assistente IA especializado em entretenimento. 

PERSONALIDADE: Entusiasmado, conhecedor, anal√≠tico mas acess√≠vel. Use emojis.

FUN√á√ÉO: Analise dados do usu√°rio (hist√≥rico, ratings, favoritos, tipos preferidos) para dar recomenda√ß√µes ultra-personalizadas de games/filmes/s√©ries/animes.

RESPOSTA: M√°ximo 250 palavras, estruturado, sempre explique POR QUE est√° recomendando baseado no perfil da pessoa.`,
        },
        {
          role: "user",
          content: userMessage,
        },
      ];

      if (context) {
        messages[0].content += `\n\nDADOS DO USU√ÅRIO: ${JSON.stringify(context, null, 2)}`;
      }

      const response = await fetch(this.baseUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${this.apiKey}`,
        },
        body: JSON.stringify({
          model: "gpt-3.5-turbo",
          messages,
          max_tokens: 350,
          temperature: 0.7,
        }),
      });

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.statusText}`);
      }

      const data: OpenAIResponse = await response.json();
      return (
        data.choices[0]?.message?.content ||
        "Desculpe, n√£o consegui processar sua mensagem."
      );
    } catch (error) {
      console.error("Erro na API OpenAI:", error);
      return this.getMockResponse(userMessage, context);
    }
  }

  private getMockResponse(userMessage: string, context?: any): string {
    const message = userMessage.toLowerCase();

    // Usar contexto para respostas mais personalizadas
    if (context) {
      return this.getContextualResponse(message, context);
    }

    // Respostas baseadas em palavras-chave (fallback)
    if (message.includes("jogo") || message.includes("game")) {
      const gameResponses = [
        'üéÆ Baseado no seu perfil, recomendo "The Witcher 3: Wild Hunt" - um RPG √©pico com uma hist√≥ria incr√≠vel!',
        '‚öîÔ∏è Que tal experimentar "Hades"? √â um roguelike indie fant√°stico com combate din√¢mico!',
        'üåÜ Sugiro "Cyberpunk 2077" se voc√™ gosta de RPGs futur√≠sticos com mundo aberto!',
        'üå± Para algo relaxante, "Stardew Valley" √© perfeito - farming e relacionamentos!',
      ];
      return gameResponses[Math.floor(Math.random() * gameResponses.length)];
    }

    if (message.includes("filme") || message.includes("movie")) {
      const movieResponses = [
        'üé¨ Recomendo "Inception" se voc√™ gosta de filmes que fazem pensar!',
        'üöÄ Que tal "Interstellar"? Fic√ß√£o cient√≠fica emocionante com √≥timos efeitos!',
        'üíä "The Matrix" √© um cl√°ssico que todo geek deveria assistir!',
        'üèúÔ∏è Para algo mais recente, "Dune" (2021) √© visualmente deslumbrante!',
      ];
      return movieResponses[Math.floor(Math.random() * movieResponses.length)];
    }

    if (message.includes("anime") || message.includes("s√©rie")) {
      const animeResponses = [
        '‚öîÔ∏è Sugiro "Attack on Titan" - uma obra-prima com plot twists incr√≠veis!',
        'üìì "Death Note" √© perfeito para quem gosta de suspense psicol√≥gico!',
        'üëπ Que tal "Demon Slayer"? Anima√ß√£o linda e lutas √©picas!',
        '‚öóÔ∏è "Fullmetal Alchemist: Brotherhood" √© considerado um dos melhores animes!',
      ];
      return animeResponses[Math.floor(Math.random() * animeResponses.length)];
    }

    if (message.includes("analise") || message.includes("perfil")) {
      return this.getProfileAnalysis(context);
    }

    // Resposta padr√£o
    const defaultResponses = [
      "üéØ Como seu assistente Archivius, posso te ajudar com sugest√µes de games, filmes, animes e s√©ries! O que voc√™ tem interesse?",
      "ÔøΩÔøΩ Estou aqui para dar as melhores recomenda√ß√µes baseadas no seu perfil! Me conte o que voc√™ est√° procurando!",
      "üåü Precisa de sugest√µes de entretenimento? Posso te ajudar a descobrir seu pr√≥ximo game ou filme favorito!",
      "üéÆüé¨ Vamos encontrar algo incr√≠vel para voc√™! Me fale sobre seus gostos e prefer√™ncias!",
    ];

    return defaultResponses[
      Math.floor(Math.random() * defaultResponses.length)
    ];
  }

  private getContextualResponse(message: string, context: any): string {
    const {
      totalMedia,
      completedMedia,
      favoriteTypes,
      averageRating,
      recentlyCompleted,
    } = context;

    if (message.includes("analise") || message.includes("perfil")) {
      return this.getProfileAnalysis(context);
    }

    if (message.includes("recomend") || message.includes("sugir")) {
      if (favoriteTypes.length > 0) {
        const mainType = favoriteTypes[0];
        const recentTitles = recentlyCompleted
          .map((item) => item.title)
          .join(", ");

        return `üéØ **Recomenda√ß√£o personalizada:**

Vejo que voc√™ √© f√£ de **${mainType}** e tem uma m√©dia de ${averageRating}‚≠ê nas suas avalia√ß√µes!

Baseado no que voc√™ jogou recentemente (${recentTitles}), recomendo:

‚Ä¢ **[T√≠tulo personalizado]** - Porque combina com seu gosto por ${mainType}
‚Ä¢ **[Outro t√≠tulo]** - Similar ao que voc√™ j√° gostou, mas com elementos novos

üí° *Precisa de mais detalhes sobre alguma dessas sugest√µes?*`;
      }
    }

    // Resposta baseada no contexto geral
    return `ü§ñ Analisando seu perfil: ${completedMedia} itens completados de ${totalMedia} totais. 
    
M√©dia de avalia√ß√£o: ${averageRating}‚≠ê
    
Que tipo de recomenda√ß√£o voc√™ gostaria? Posso sugerir algo baseado no que voc√™ j√° gostou! üéÆüé¨`;
  }

  private getProfileAnalysis(context: any): string {
    if (!context) {
      return "üìä Para fazer uma an√°lise detalhada, preciso que voc√™ tenha alguns itens em sua biblioteca primeiro!";
    }

    const {
      totalMedia,
      completedMedia,
      favoriteTypes,
      averageRating,
      recentlyCompleted,
      preferences,
    } = context;

    let analysis = `üîç **AN√ÅLISE DO SEU PERFIL** 

üìö **Estat√≠sticas:**
‚Ä¢ ${completedMedia} de ${totalMedia} itens completados
‚Ä¢ M√©dia de avalia√ß√£o: ${averageRating}‚≠ê
‚Ä¢ Tipos favoritos: ${favoriteTypes.join(", ") || "Ainda descobrindo"}

üéØ **Seus padr√µes:**`;

    if (averageRating > 7) {
      analysis += "\n‚Ä¢ Voc√™ √© criterioso - avalia bem acima da m√©dia!";
    } else if (averageRating > 5) {
      analysis += "\n‚Ä¢ Voc√™ tem gostos equilibrados nas avalia√ß√µes";
    }

    if (recentlyCompleted.length > 0) {
      analysis += `\n‚Ä¢ Recentemente completou: ${recentlyCompleted.map((item) => item.title).join(", ")}`;
    }

    analysis += `\n\nüí° **Recomenda√ß√µes baseadas no seu perfil:**
‚Ä¢ Continue explorando ${favoriteTypes[0] || "novos g√™neros"}
‚Ä¢ Experimente t√≠tulos com rating similar ao que voc√™ gosta
‚Ä¢ Considere expandir para outros tipos de m√≠dia

üéÆ *Quer recomenda√ß√µes espec√≠ficas? Me pergunte!*`;

    return analysis;
  }

  // M√©todo para gerar sugest√µes baseadas no perfil do usu√°rio
  async getPersonalizedSuggestions(userProfile: any): Promise<string> {
    const context = {
      favorites: userProfile.favorites,
      recentActivity: "Atividade recente do usu√°rio",
    };

    const prompt =
      "Me d√™ 3 sugest√µes personalizadas baseadas no meu perfil e hist√≥rico.";
    return this.sendMessage(prompt, context);
  }

  // M√©todo para an√°lise de compatibilidade
  async analyzeCompatibility(item: string, userProfile: any): Promise<string> {
    const prompt = `Analise se "${item}" seria uma boa recomenda√ß√£o para mim baseado no meu perfil.`;
    return this.sendMessage(prompt, userProfile);
  }
}

export const openaiService = new OpenAIService();
